{"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mcap\/opcode\/hash(into:)"]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"kind":"text","text":")"}],"symbolKind":"method","role":"symbol","modules":[{"name":"MCAP"}],"title":"hash(into:)","roleHeading":"Instance Method","extendedModule":"Swift","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"externalID":"s:SYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF::SYNTHESIZED::s:4MCAP6OpcodeO"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"hasher","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"text":")","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]}],"hierarchy":{"paths":[["doc:\/\/MCAP\/documentation\/MCAP","doc:\/\/MCAP\/documentation\/MCAP\/Opcode","doc:\/\/MCAP\/documentation\/MCAP\/Opcode\/RawRepresentable-Implementations"]]},"abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"RawRepresentable.hash(into:)"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MCAP\/documentation\/MCAP\/Opcode\/hash(into:)"},"references":{"doc://MCAP/documentation/MCAP/Opcode/RawRepresentable-Implementations":{"title":"RawRepresentable Implementations","type":"topic","kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/mcap\/opcode\/rawrepresentable-implementations","identifier":"doc:\/\/MCAP\/documentation\/MCAP\/Opcode\/RawRepresentable-Implementations"},"doc://MCAP/documentation/MCAP/Opcode":{"title":"Opcode","navigatorTitle":[{"text":"Opcode","kind":"identifier"}],"role":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Opcode","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MCAP\/documentation\/MCAP\/Opcode","url":"\/documentation\/mcap\/opcode"},"doc://MCAP/documentation/MCAP":{"title":"MCAP","role":"collection","abstract":[{"text":"Read and write log files containing heterogeneous timestamped data.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MCAP\/documentation\/MCAP","url":"\/documentation\/mcap"},"doc://MCAP/documentation/MCAP/Opcode/hash(into:)":{"identifier":"doc:\/\/MCAP\/documentation\/MCAP\/Opcode\/hash(into:)","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/mcap\/opcode\/hash(into:)","kind":"symbol","title":"hash(into:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]}}}}